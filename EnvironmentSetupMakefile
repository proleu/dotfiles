SHELL := /bin/bash
all: install_miniforge install_mamba make_work_env install_nodejs install_nvim update_nvim install_vscode install_tmux install_openvpn install_fzf install_java install_nf install_unzip install_tf

CONDA_PATH := $(shell command -v conda 2>/dev/null)

install_miniforge:
	if [ -z "$(CONDA_PATH)" ]; then \
        wget -O Miniforge3.sh "https://github.com/conda-forge/miniforge/releases/download/23.3.1-1/Mambaforge-23.3.1-1-Linux-x86_64.sh"; \
        bash Miniforge3.sh -b -p "${HOME}/conda"; \
        rm Miniforge3.sh; \
        source "${HOME}/conda/etc/profile.d/conda.sh"; \
        source "${HOME}/conda/etc/profile.d/mamba.sh"; \
        conda activate; \
        export CONDA_PATH="${HOME}/conda/bin/conda"; \
    fi 

install_mamba: install_miniforge
	if ! command -v mamba &> /dev/null; then \
		${CONDA_PATH}/conda install -y mamba -c conda-forge; \
	else \
		echo "mamba is already installed."; \
	fi

make_work_env: install_mamba
	# check if conda environment already exists
	if ! conda env list | grep -q "work"; then \
		echo "Creating conda environment 'work'"; \
		mamba create -n work python=3.11 black pynvim isort awscli wheel setuptools virtualenv -c conda-forge -y ; \
		echo "source activate work" >> ~/.zshrc; \
	else \
		echo "Conda environment 'work' already exists."; \
	fi

install_nodejs:
	if ! command -v node &> /dev/null; then \
		wget https://nodejs.org/dist/v18.18.0/node-v18.18.0-linux-x64.tar.xz; \
		tar -xf node-v18.18.0-linux-x64.tar.xz; \
		sudo cp node-v18.18.0-linux-x64/bin/* /usr/bin/; \
		rm -rf node-v18.18.0-linux-x64 node-v18.18.0-linux-x64.tar.xz; \
	else \
		echo "Node.js is already installed."; \
	fi

install_nvim: install_nodejs
	if ! command -v nvim &> /dev/null; then \
			sudo apt update && sudo apt install -y neovim; \
	else \
			echo "Neovim is already installed."; \
	fi

update_nvim: install_nvim
	mkdir -p "${HOME}/.config/nvim"
	if [ -f "${HOME}/.config/nvim/init.vim" ]; then \
		cat "${HOME}/.config/nvim/init.vim" > "${HOME}/.config/nvim/init.vim.bak"; \
	else \
		echo "No existing init.vim file found."; \
	fi \
	cp init.vim "${HOME}/.config/nvim/init.vim" ; \
	nvim -c "PlugInstall" -c "qa" \
	nvim -c "PlugUpdate" -c "qa" \

install_vscode:
	if ! command -v code &> /dev/null; then \
		sudo apt update && sudo apt install -y software-properties-common apt-transport-https wget; \
		wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -; \
		sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"; \
		sudo apt update && sudo apt install -y code; \
	else \
		echo "VS Code is already installed."; \
	fi

install_tmux:
	if ! command -v tmux &> /dev/null; then \
		sudo apt update && sudo apt install -y tmux; \
	else \
		echo "tmux is already installed."; \
	fi

install_openvpn:
	if ! command -v openvpn &> /dev/null; then \
		sudo apt update && sudo apt install -y openvpn; \
	else \
		echo "OpenVPN is already installed."; \
	fi

install_fzf:
	if ! command -v fzf > /dev/null 2>&1; then \
		sudo apt update && sudo apt install -y fzf; \
	else \
		echo "fzf is already installed."; \
	fi

install_java:
	if ! command -v java &> /dev/null; then \
		sudo apt update && sudo apt install -y openjdk-11-jdk; \
	else \
		echo "Java is already installed."; \
	fi


install_nf: install_java
	if ! command -v nextflow > /dev/null 2>&1; then \
		curl -s https://get.nextflow.io | bash; \
		chmod +x nextflow; \
		sudo mv nextflow /usr/bin/nextflow; \
	else \
		echo "nextflow is already installed."; \
	fi

install_unzip:
	if ! command -v unzip > /dev/null 2>&1; then \
		sudo apt update && sudo apt install -y unzip; \
	else \
		echo "unzip is already installed."; \
	fi

install_tf: install_unzip
	if ! command -v terraform > /dev/null 2>&1; then \
		wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip; \
			unzip terraform_1.6.0_linux_amd64.zip; \
			sudo mv terraform /usr/local/bin/; \
			rm terraform_1.6.0_linux_amd64.zip; \
		else \
			echo "terraform is already installed."; \
		fi
